import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        mavenCentral()
        maven {url 'http://repo.spring.io/plugins-release'}
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.4.2.RELEASE'
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
        classpath 'io.spring.gradle:dependency-management-plugin:0.5.4.RELEASE'
    }
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'propdeps'
apply plugin: 'war'
//apply plugin: 'liquibase'

group 'com.slidepiper'

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8

configurations {
    customProvidedRuntime
}

dependencyManagement {
    imports {
        mavenBom 'com.amazonaws:aws-java-sdk-bom:1.11.76'
    }
}

dependencies {
//    compile group: 'org.liquibase', name: 'liquibase-core', version: '3.3.2'
// https://mvnrepository.com/artifact/junit/junit

    testCompile group: 'junit', name: 'junit', version: '4.4'
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile ("org.thymeleaf.extras:thymeleaf-extras-springsecurity4:3.0.0.RELEASE")
    compile ("io.github.jpenren:thymeleaf-spring-data-dialect:3.1.1")
    compile 'com.amazonaws:aws-java-sdk-cloudfront'
    compile 'com.amazonaws:aws-java-sdk-s3'
    compile 'com.amazonaws:aws-java-sdk-ses'
    compile 'com.amazonaws:aws-java-sdk-sns'
    compile 'com.auth0:java-jwt:3.1.0'
    compile 'com.maxmind.geoip2:geoip2:0.8.0'
    compile 'com.jcraft:jsch:0.1.54'
    compile 'commons-io:commons-io:2.4'
    compile 'mysql:mysql-connector-java:6.0.5'
    compile 'org.apache.commons:commons-csv:1.2'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.apache.commons:commons-vfs2:2.1'
    compile 'org.hashids:hashids:1.0.1'
    compile 'org.jasypt:jasypt:1.9.2'
    compile 'org.json:json:20141113'
    compileOnly 'org.projectlombok:lombok:1.16.10'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-starter-mustache'
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile 'org.springframework.boot:spring-boot-starter-test'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'com.google.code.gson:gson:2.8.4'
    optional 'org.springframework.boot:spring-boot-configuration-processor'
    optional 'org.springframework.boot:spring-boot-devtools'
    customProvidedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    compile 'junit:junit:4.12'
}

springBoot {
    mainClass = 'com.slidepiper.Application'
    providedConfiguration = 'customProvidedRuntime'
}

task gulp(type: Exec) {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'gulp.cmd', 'build'
    } else if (Os.isFamily(Os.FAMILY_MAC) || Os.isFamily(Os.FAMILY_UNIX)) {
        commandLine 'gulp', 'build'
    }
}

processResources.dependsOn gulp
compileJava.dependsOn processResources

war {
    from ('.ebextensions') {
        into '.ebextensions'
    }
    classpath = sourceSets.main.output + configurations.runtime - configurations.customProvidedRuntime
    exclude('static/src')

    def tag = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--abbrev=0'
        standardOutput = tag
    }

    def commitId = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = commitId
    }

    archiveName = tag.toString().trim() + '+' + commitId.toString().trim() + '.war'
}